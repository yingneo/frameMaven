<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/jdbc 
    http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop 
    classpath:/org/springframework/aop/config/spring-aop-3.0.xsd">

    <context:component-scan base-package="com.xyd" />

    <!-- 属性注入器，用于读取项目配置文件中的属性 -->
    <bean id="PropertiesConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:log4j.properties</value>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
    
    <mvc:interceptors>  
    <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->  
    	<bean class="com.common.interceptor.AllInterceptor"/>  
    	<!-- <mvc:interceptor>  
        	<mvc:mapping path="/userController/*"/>  
        	定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的  
        	<bean class="com.xyd.common.LoginInterceptor"/>  
   	 	</mvc:interceptor>   -->
	</mvc:interceptors> 

    <!-- 数据源，不需要解释 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    
    <!-- SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- <property name="mapperLocations"
            value="classpath*:com/abc/dao/*.xml" /> -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>
    
    <!-- Mybatis sql session -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
    <!-- Mybatis mapper scanner, scans for java mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xyd.dao" />
        <property name="sqlSessionTemplateBeanName" value="sqlSession" />
    </bean>

</beans>